swagger: "2.0"
info:
  description: "This API provides information about volunteers and their engagement in agencies."
  version: "2.14.04"
  title: "Galaxy Digital API"
host: "api2.galaxydigital.com"
basePath: "/volunteer"
tags:
- name: "user"
  description: ""
  externalDocs:
    description: "Find out more"
    url: "http://api2.galaxydigital.com/volunteer/docs/#userList"
- name: "agency"
  description: ""
  externalDocs:
    description: "Find out more"
    url: "http://api2.galaxydigital.com/volunteer/docs/#agencyList"
- name: "need"
  description: ""
  externalDocs:
    description: "Find out more"
    url: "http://api2.galaxydigital.com/volunteer/docs/#needList"
- name: "response"
  description: ""
  externalDocs:
    description: "Find out more"
    url: "http://api2.galaxydigital.com/volunteer/docs/#responseList"
- name: "hour"
  description: ""
  externalDocs:
    description: "Find out more"
    url: "http://api2.galaxydigital.com/volunteer/docs/#hourList"
- name: "event"
  description: ""
  externalDocs:
    description: "Find out more"
    url: "http://api2.galaxydigital.com/volunteer/docs/#eventList"

schemes:
- "https"

securityDefinitions:
  api_key:
    type: "apiKey"
    name: "key"
    in: "query"

security:
  - api_key: []

paths:
  /user/list:
    get:
      tags:
      - "user"
      summary: "Get a page of users"
      description: "Use this endpoint to obtain a list of all users on your domain with a variety of the users' data. Users who are active, pending, imported, or inactive will be included."
      operationId: "getUserList"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        type: "integer"
        description: "Number of records you wish to skip before your result set starts. This is used for pagination."
        in: "query"
        required: false
      - name: "limit"
        type: "integer"
        description: "This will limit the number of records returned. The maximum number you can return at one time is 50."
        in: "query"
        required: false
        maximum: 50
      - name: "where"
        type: "array"
        items:
            type: string
        description: "This will filter results where a specific item is equal to the value passed. e.g. where[firstName]=Jim"
        in: "query"
        required: false
      - name: "like"
        type: "array"
        items:
            type: string
        description: "This will filter results where a specific item is contains the value passed. e.g. like[lastName]=oe, which will pick up names like 'Doe' and 'Hoehn'"
        in: "query"
        required: false
      - name: "status"
        type: "string"
        description: "This will filter results based on the user's current status. You may use 'active', 'inactive', 'pending', or 'imported'"
        in: "query"
        required: false
      - name: "since_id"
        type: "integer"
        description: "This will return agencies with a unique id that is greater than the id specified."
        in: "query"
        required: false
      - name: "since_date"
        type: "string"
        format: "yyyy-mm-dd"
        description: "This will return agencies that have been added to the system since the date specified."
        in: "query"
        required: false
      - name: "return"
        type: "array"
        items:
            type: string
        description: "Request additional user data as part of the result set. You may use 'extras', 'tags', 'interests', 'stats', 'qualifications', 'registration', 'skills', and/or 'favoriteAgencies'. e.g. return[]='extras' return[]='tags'"
        in: "query"
        required: false
      
      responses:
        "200":
          description: "successfully retrieved response containing a page of records"
          schema:
            $ref: "#/definitions/UserListResponse"
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
  
  
  
  /user/get:
    get:
      tags:
      - "user"
      summary: "Get a single user by id"
      description: "Use this endpoint to obtain information about a single user on your site. The user must be a active, pending, imported, or inactive, and they must also be on your site. Submit the `id` parameter to complete the get, where the id is the user ID on your site."
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        type: "string"
        description: "Unique identifier of record you wish to have returned."
        in: "query"
        required: false
      - name: "idType"
        type: "string"
        description: "Type of unique identifier you will be using to request the user record. You may use 'id', 'email', or 'referenceId'. The default is 'id', which is the GetConnected user ID.'"
        in: "query"
        required: false
      - name: "getLogin"
        type: "boolean"
        description: "Request to create and return one-click login for this user."
        in: "query"
        required: false
      - name: "return"
        type: "array"
        items:
            type: string
        description: "Request additional user data as part of the result set. You may use 'extras', 'tags', 'interests', 'stats', 'qualifications', 'registration', 'skills', and/or 'favoriteAgencies'. e.g. return[]='extras' return[]='tags'"
        in: "query"
        required: false

      responses:
        "200":
          description: "successfully retrieved response containing a record"
          schema:
            $ref: "#/definitions/UserByIdResponse"
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
            
  /user/add:
    post:
      tags:
      - "user"
      summary: "Add a single user by id"
      description: "You can add a user to your site with this POST. The user will have a status of 'pending,' a source of 'API Insert,' and a date added and updated equal to the current date and time. The system will check to make sure that the email used is not already on your site."
      operationId: "addUserById"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be added."
        required: true
        schema:
          $ref: "#/definitions/AddNewUserBody"

      responses:
        "200":
          description: "successfully added a new record"
          schema:
            $ref: "#/definitions/UserByIdResponse"
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
            
  /user/update:
    post:
      tags:
      - "user"
      summary: "Update a single user"
      description: "You can update a user's data with this POST. Supply as many changes as you like, and they will all replace current values. The user must be on your site and have a status of active, pending, imported, or inactive."
      operationId: "updateUserById"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/UpdateUserBody"

      responses:
        "200":
          description: "successfully updated a record"
          schema:
            $ref: "#/definitions/UserByIdResponse"
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
    
  /user/onclick:
    get:
      tags:
      - "user"
      summary: "hyperlink for login"
      description: "This endpoint produce a hyperlink that the user can follow to log into your site. The user must be on your site and have a status of active. The link will be valid for 15 minutes."
      operationId: "oneClick"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        type: "string"
        description: "Unique identifier of record you wish to have returned."
        in: "query"
        required: false
      responses:
        "200":
          description: "Successfull one click login."
          schema:
            type: object
            properties:
              link:
                type: string
                description: "Link to be used that will auto-log user into the site."
                example: "http://www.example.com/users/oneclick/badb6c834899c356ee998a5231e578a5/"
              expires:
                type: string
                description: "The time, in ISO 8601 format, at which the link will expire."
                example: "2014-01-21T18:08:33-06:00"
              now:
                type: string
                description: "Current time, in ISO 8601 format, for when the request was made."
                example: "2014-01-21T18:23:33-06:00"
              
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
  
  /user/authenticate:
    post:
      tags:
      - "user"
      summary: "Authenticate User"
      description: "This endpoint can be used to log a user into the system by passing their email and password as part of the post. The email must match a user on your site, and the user must be active."
      operationId: "authenticateUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User data that needs to be authenticated"
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
              description: "Email address for record you wish to have returned."
            password:
              type: string
              description: "Password for record you wish to have returned."
            getLogin:
              type: boolean
              description: "Request to create and return one-click login for this user."
            return:
              type: array
              items: 
                type: "string"

      responses:
        "200":
          description: "Successfull user authenticate"
          schema:
            $ref: "#/definitions/UserByIdResponse"
              
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
  
            
  /agency/list:
    get:
      tags:
      - "agency"
      summary: "Get a page of agencies"
      description: "Use this endpoint to obtain a list of all agencies on your domain with a variety of the agencies' data. Agencies must be on your site, and inactive agencies will not be included in the results."
      operationId: "getAgencyList"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        type: "integer"
        description: "Number of records you wish to skip before your result set starts. This is used for pagination."
        in: "query"
        required: false
      - name: "limit"
        type: "integer"
        description: "This will limit the number of records returned. The maximum number you can return at one time is 50."
        in: "query"
        required: false
        maximum: 50
      - name: "since_id"
        type: "integer"
        description: "This will return agencies with a unique id that is greater than the id specified."
        in: "query"
        required: false
      - name: "since_date"
        type: "string"
        format: "yyyy-mm-dd"
        description: "This will return agencies that have been added to the system since the date specified."
        in: "query"
        required: false
      - name: "search"
        type: "string"
        description: "This will limit results based on search string passed. This will search against the need title, description, and any tags associated with the agency."
        in: "query"
        required: false
           
      responses:
        "200":
          description: "successfully retrieved response containing a page of records"
          schema:
            $ref: "#/definitions/AgencyListResponse"
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
  
  
  
  /agency/get:
    get:
      tags:
      - "agency"
      summary: "Get a single agency by id"
      description: "Use this endpoint to obtain information about a single agency on your site. The agency cannot be inactive, and they must also be on your site. Submit the `id` parameter to complete the get, where the id is the agency ID on your site."
      operationId: "getAgencyById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        type: "string"
        description: "Unique identifier of record you wish to have returned."
        in: "query"
        required: true
        pattern: "^[0-9]+$"
      
      responses:
        "200":
          description: "successfully retrieved response containing a record"
          schema:
            $ref: "#/definitions/AgencyByIdResponse"
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
  
  /need/list:
    get:
      tags:
      - "need"
      produces:
      - "application/json"
      summary: "Get a page of needs"
      description: "Use this endpoint to obtain a list of all needs on your domain with a variety of the needs’ data. Needs must be on your site, active, and non expired."
      operationId: "getNeedList"
      parameters:
      - name: "offset"
        type: "integer"
        description: "Number of records you wish to skip before your result set starts. This is used for pagination."
        in: "query"
        required: false
      - name: "limit"
        type: "integer"
        description: "This will limit the number of records returned. The maximum number you can return at one time is 50."
        in: "query"
        required: false
        maximum: 50
      - name: "since_id"
        type: "integer"
        description: "This will return agencies with a unique id that is greater than the id specified."
        in: "query"
        required: false
      - name: "showExpired"
        type: "boolean"
        description: "This will allow expired needs to be part of the result set."
        in: "query"
        required: false
      - name: "since_date"
        type: "string"
        format: "yyyy-mm-dd"
        description: "This will return agencies that have been added to the system since the date specified."
        in: "query"
        required: false
      - name: "search"
        type: "string"
        description: "This will limit results based on search string passed. This will search against the need title, description, and any tags associated with the agency."
        in: "query"
        required: false
      - name: "aemId"
        type: "string"
        description: "This will return needs that have been part of a specific Advanced Event."
        in: "query"
        required: false
      - name: "initiativeId"
        type: "string"
        description: "This will return needs that have been part of a specific Initative."
        in: "query"
        required: false
      - name: "agency"
        type: "string"
        description: "Unique agency identifier. This will return needs that have been added to the system by a specific agency."
        in: "query"
        required: false
      - name: "type"
        type: "string"
        description: "This will return needs that have been categorized with the category specified."
        enum: [volunteer, advocate, inkind, employment]
        in: "query"
        required: false
      - name: "orderBy"
        type: "string"
        description: "This will define the order in which the needs are returned. Options are: 'newest', 'oldest', 'soonest', and 'alpha'. Note: soonest will not return 'Ongoing' needs."
        enum: [newest, oldest, soonest, alpha]
        in: "query"
        required: false
      
      responses:
        "200":
          description: "successfully retrieved response containing a page of records"
          schema:
            $ref: "#/definitions/NeedListResponse"
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
            
  /need/get:
    get:
      tags:
      - "need"
      produces:
      - "application/json"
      summary: "Get a single need by id"
      description: "Use this endpoint to obtain information about a single need on your site. The need must be active, non expired, and on your site. Submit the `id` parameter to complete the get, where the id is the need ID on your site."
      operationId: "getNeedById"
      parameters:
      - name: "id"
        type: "string"
        description: "Unique identifier of record you wish to have returned."
        in: "query"
        required: true
        pattern: "^[0-9]+$"
      - name: "showExpired"
        type: "boolean"
        description: "This will allow expired needs to be part of the result set."
        in: "query"
        required: true
      
      responses:
        "200":
          description: "successfully retrieved response containing a record"
          schema:
            $ref: "#/definitions/NeedByIdResponse"
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
      
      
  
  /response/list:
    get:
      tags:
      - "response"
      summary: "Get a page of responses"
      description: "Use this endpoint to obtain a list of all agencies on your domain with a variety of the agencies' data. Agencies must be on your site, and inactive agencies will not be included in the results."
      operationId: "getResponseList"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        type: "integer"
        description: "Number of records you wish to skip before your result set starts. This is used for pagination."
        in: "query"
        required: false
        
      - name: "limit"
        type: "integer"
        description: "This will limit the number of records returned. The maximum number you can return at one time is 50."
        in: "query"
        required: false
        maximum: 50
        
      - name: "agencyId"
        type: "integer"
        description: "This will return responses to needs for the specific agency."
        in: "query"
        required: false
        
      - name: "needId"
        type: "integer"
        description: "This will return responses to needs for the specific agency."
        in: "query"
        required: false
        
      - name: "userId"
        type: "integer"
        description: "This will return responses to needs for the specific agency."
        in: "query"
        required: false
        
      - name: "companyId"
        type: "integer"
        description: "This will return responses to needs for the specific agency."
        in: "query"
        required: false
        
      - name: "aemId"
        type: "integer"
        description: "This will return agencies that have been added to the system since the date specified."
        in: "query"
        required: false
        
      - name: "initiativeId  "
        type: "integer"
        description: "This will limit results based on search string passed. This will search against the need title, description, and any tags associated with the agency."
        in: "query"
        required: false
      
      - name: "shift"
        type: "array"
        items:
            type: string
        description: "This will limit results based on search string passed. This will search against the need title, description, and any tags associated with the agency."
        in: "query"
        required: false
        
      - name: "sinceId"
        type: "integer"
        description: "This will limit results based on search string passed. This will search against the need title, description, and any tags associated with the agency."
        in: "query"
        required: false
        
      - name: "sinceDate"
        type: "string"
        description: "This will limit results based on search string passed. This will search against the need title, description, and any tags associated with the agency."
        in: "query"
        required: false
      
      - name: "status"
        type: "array"
        items:
            type: string
        description: "This will limit results based on search string passed. This will search against the need title, description, and any tags associated with the agency."
        in: "query"
        required: false
      
      responses:
        "200":
          description: "successfully retrieved response containing a page of records"
          schema:
            $ref: "#/definitions/ResponseListResponse"
        "403":
          description: "successfully retrieved response containing a page of records"
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
  
  /response/get:
    get:
      tags:
      - "response"
      summary: "Get a single response by id"
      description: "Use this endpoint to obtain information about a single response on your site. Unlike other endpoints, the response does not have to have a specific status to be shown. Submit the `id` parameter to complete the get, where the id is the response ID on your site."
      operationId: "getResponseById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        type: "string"
        description: "Unique identifier of record you wish to have returned."
        in: "query"
        required: true
        pattern: "^[0-9]+$"
      
      responses:
        "200":
          description: "successfully retrieved response containing a record"
          schema:
            $ref: "#/definitions/ResponseByIdResponse"
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
  
  /response/add:
    get:
      tags:
      - "response"
      summary: "Get a single response by id"
      description: "You can create a response between a user on your site and a need on your site using this post. In addition to being on your site, the user must have a status of active, pending, imported, or inactive. In addition to being on your site, the need must be active and non expired. A response will be recorded to the user and need you specify, that need’s agency will be recorded, the current time will be added as the date added and updated, and status will be active."
      operationId: "addNewResponse"
      produces:
      - "application/json"
      parameters:
      - name: "needId"
        type: "integer"
        description: "ID of the need from this response."
        in: "query"
        required: false
      
      - name: "userId"
        type: "integer"
        description: "ID of the user from this response."
        in: "query"
        required: false
      
      - name: "responsePhone"
        type: "string"
        description: "Phone number of the responder."
        in: "query"
        required: false
      
      - name: "responseAddress"
        type: "string"
        description: "Address of the responder."
        in: "query"
        required: false
      
      - name: "responseNote"
        type: "string"
        description: "Comment to add to the response."
        in: "query"
        required: false
      
      
      responses:
        "200":
          description: "Successfully added a new record"
          schema:
            $ref: "#/definitions/ResponseByIdResponse"
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
            
  /hour/list:
    get:
      tags:
      - "hour"
      summary: "Get a page of hour records"
      description: "Use this endpoint to obtain a list of all hours on your domain with a variety of data about the hours as well as data about the user, agency, and need. The hours’ user must be active, the hours’ need must not be inactive, the hours’ agency must not be inactive, the hours must be active, and the hours must be on your site."
      operationId: "getHourList"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        type: "integer"
        description: "Number of records you wish to skip before your result set starts. This is used for pagination."
        in: "query"
        required: false
      - name: "limit"
        type: "integer"
        description: "This will limit the number of records returned. The maximum number you can return at one time is 50."
        in: "query"
        required: false
        maximum: 5
      - name: "agencyId"
        type: "integer"
        description: "This will return hours applied to needs for the specific agency."
        in: "query"
        required: false
      - name: "needId"
        type: "integer"
        description: "This will return hours applied to a specific need."
        in: "query"
        required: false
      - name: "userId"
        type: "integer"
        description: "This will return hours submitted by a specific user."
        in: "query"
        required: false
      - name: "aemId"
        type: "integer"
        description: "This will return hours part of a specific Advanced Event."
        in: "query"
        required: false
      - name: "sinceId"
        type: "integer"
        description: "This will return hours with an id that is greater than the id specified."
        in: "query"
        required: false
      - name: "sinceDate"
        type: "string"
        format: "yyyy-mm-dd"
        description: "This will return hours that have been added to the system since the date specified."
        in: "query"
        required: false
      - name: "return"
        type: "array"
        items:
          enum: [referenceId]
        description: "Request additional hour data as part of the result set. You may only use 'referenceId' for now. e.g. return[]='referenceId'"
        in: "query"
        required: false
      - name: "status"
        type: "array"
        items:
          enum: [entered, inactive, pending, approved, denied]
        description: "This will filter results based on item's current status. You may use any combination of 'entered', 'inactive', 'pending', 'approved', 'denied'"
        in: "query"
        required: false
           
      responses:
        "200":
          description: "successfully retrieved response containing a page of records"
          schema:
            $ref: "#/definitions/HourListResponse"
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
            
  /hour/get/:
    get:
      tags:
      - "hour"
      summary: "Get an hour record by id"
      description: "Use this endpoint to obtain information about a single hours entry on your site. The hours’ user must be active, the hours’ need must not be inactive, the hours’ agency must not be inactive, and the hours must be on your site. Submit the `hourId` parameter to complete the get, where the id is the hour id on our site."
      operationId: "getHourById"
      produces:
      - "application/json"
      parameters:
      - name: "hourId"
        type: "string"
        description: "Unique identifier of record you wish to have returned."
        in: "query"
        required: true
      
      responses:
        "200":
          description: "successfully retrieved response containing a record"
          schema:
            $ref: "#/definitions/HourByIdResponse"
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
            
  /hour/add/:
    post:
      tags:
      - "hour"
      summary: "Add a new volunteering hours entry."
      description: "You can create an hours entry for a user on your site and a need on your site using this post. The user must have a status of active, pending, imported, or inactive. The hours will be created for the user and the need, the status will be “approved,” the current time will be added as the date added and updated, and the “hours” value you supply will be recorded as the duration."
      operationId: "addNewHour"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Volunteering hours entry that needs to be added."
        required: true
        schema:
          $ref: "#/definitions/AddNewHoursBody"

      responses:
        "200":
          description: "successfully added a new hour entry"
          schema:
            $ref: "#/definitions/HourByIdResponse"
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
            
  /hour/update/:
    post:
      tags:
      - "hour"
      summary: "Update existing volunteering hours entry."
      description: "Use this POST to update an existing hours entry. Add as many parameters as you like to replace current data. The hours updated must be associated with an active user, a need that is not inactive, an agency that is not inactive, and be on your site."
      operationId: "updateHour"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Updated fields (and id) for an existin volunteering hours entry."
        required: true
        schema:
          $ref: "#/definitions/UpdateHoursBody"

      responses:
        "200":
          description: "successfully updated an hour entry"
          schema:
            $ref: "#/definitions/HourByIdResponse"
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
  
  /event/list:
    get:
      tags:
      - "event"
      summary: "Get a page of agencies"
      description: "Use this endpoint to obtain a full list of events on your domain with a variety of data about the event. The events must be on your site, active, and start in the future in order to appear in results."
      operationId: "getEventList"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        type: "integer"
        description: "Number of records you wish to skip before your result set starts. This is used for pagination."
        in: "query"
        required: false
      - name: "limit"
        type: "integer"
        description: "This will limit the number of records returned. The maximum number you can return at one time is 50."
        in: "query"
        required: false
        maximum: 50
      
      responses:
        "200":
          description: "successfully retrieved response containing a page of records"
          schema:
            $ref: "#/definitions/EventListResponse"
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
  
  
  
  /event/get:
    get:
      tags:
      - "event"
      summary: "Get a single record by id"
      description: "Use this endpoint to obtain information about a single event on your site. The event must be active and it must start in the future. Submit the `id` parameter to complete your get, where the id is the event id on your site."
      operationId: "getEventById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        type: "string"
        description: "Unique identifier of record you wish to have returned."
        in: "query"
        required: true

      responses:
        "200":
          description: "successfully retrieved response containing a record"
          schema:
            $ref: "#/definitions/EventByIdResponse"
        "403":
          description: "Invalid API Key."
          schema:
            $ref: "#/definitions/NoApiKeyResponse"
            

          
definitions:
  BaseResponse:
    type: "object"
    properties:
      message:
        type: "string"
        example: "ok"
    required:
    - "message"
    
  AddNewUserBody:
    type: "object"
    properties:
      referenceId:
        type: "string"
        description: "Remote unique identifier for the user record."
      firstName:
        type: "string"
        description: "First name for the user."
      lastName:
        type: "string"
        description: "Last name for the user."
      middleName:
        type: "string"
        description: "Middle name for the user."
      email:
        type: "string"
        description: "Valid email address for the user."
      address:
        type: "string"
        description: "Street address for the user."
      address2:
        type: "string"
        description: "Secondary address for the user. e.g. Appt 2"
      city:
        type: "string"
        description: "City for the user"
      state:
        type: "string"
        description: "Two letter state abbreviation. e.g. NY."
      postal:
        type: "string"
        description: "Zip/Postal code for the user"
      password:
        type: "string"
        description: "Desired password for the user."
      status:
        type: "string"
        enum: [active, pending, inactive, imported]
        description: "Set current status of user. (active, pending, inactive, or imported)"
      tagsAdd:
        type: "string"
        description: "Comma separated list of words. (fish,cake,dishes)"
      extraAdd:
        type: "array"
        items: 
          type: "string"
        description: "An array of supplemental information you wish to store with the user record. e.g. extraAdd['pet'] = 'fish', extraAdd['carType'] = 'van'"
        x-nullable: true
      getLogin:
        type: "boolean"
        description: "Request to create and return one-click login for this user."
        x-nullable: true

      return:
        type: "array"
        items: 
          type: "string"
        description: "Request additional user data as part of the result set. You may use 'extras', 'tags', 'interests', 'stats', 'qualifications', 'registration', 'skills', and/or 'favoriteAgencies'. e.g. return[]='extras' return[]='tags'"
        x-nullable: true
      welcomeEmail:
        type: "boolean"
        description: "If set to true a 'welcome' email message will be sent to a new user."
        x-nullable: true

      
    required:
    - "firstName"
    - "lastName"
    - "email"
    - "password"
    
  
  UpdateUserBody:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Remote unique identifier for the user record."
      referenceId:
        type: "string"
        description: "Remote unique identifier for the user record."
      firstName:
        type: "string"
        description: "First name for the user."
        x-nullable: true
      lastName:
        type: "string"
        description: "Last name for the user."
        x-nullable: true
      middleName:
        type: "string"
        description: "Middle name for the user."
      email:
        type: "string"
        description: "Valid email address for the user."
      address:
        type: "string"
        description: "Street address for the user."
        x-nullable: true
      address2:
        type: "string"
        description: "Secondary address for the user. e.g. Appt 2"
        x-nullable: true
      city:
        type: "string"
        description: "City for the user"
        x-nullable: true
      state:
        type: "string"
        description: "Two letter state abbreviation. e.g. NY."
        x-nullable: true
      postal:
        type: "string"
        description: "Zip/Postal code for the user"
        x-nullable: true
      password:
        type: "string"
        description: "Desired password for the user."
        x-nullable: true
      status:
        type: "string"
        enum: [active, pending, inactive, imported]
        description: "Set current status of user. (active, pending, inactive, or imported)"
        x-nullable: true
      tagsAdd:
        type: "string"
        description: "Comma separated list of words. (fish,cake,dishes)"
        x-nullable: true
      tagsRemove:
        type: "string"
        description: "Comma separated list of tags to remove from user."
        x-nullable: true
      extraAdd:
        type: "array"
        items: 
          type: "string"
        description: "An array of supplemental information you wish to store with the user record. e.g. extraAdd['pet'] = 'fish', extraAdd['carType'] = 'van'"
        x-nullable: true
      extraUpdate:
        type: "array"
        items: 
          type: "string"
        description: "An array of supplemental information you wish to update on the user record. e.g. extraUpdate['pet'] = 'dog', extraUpdate['computer'] = 'laptop'. Note, if the record does not exist, one will be created."
        x-nullable: true
      extraRemove:
        type: "array"
        items: 
          type: "string"
        description: "An array of supplemental information you wish to remove from the user record. e.g. extraRemove[] = 'pet', extraRemove[] = 'computer'"
        x-nullable: true
      getLogin:
        type: "boolean"
        description: "Request to create and return one-click login for this user."
        x-nullable: true
      return:
        type: "array"
        items: 
          type: "string"
        description: "Request additional user data as part of the result set. You may use 'extras', 'tags', 'interests', 'stats', 'qualifications', 'registration', 'skills', and/or 'favoriteAgencies'. e.g. return[]='extras' return[]='tags'"
        x-nullable: true
      
    required:
    - "firstName"
    - "lastName"
    - "email"
    - "password"
    
  AddNewHoursBody:
    type: "object"
    properties:
      needId:
        type: "number"
        description: "ID of the need from this response."
      userId:
        type: "number"
        description: "ID of the user from this response."
      hours:
        type: "number"
        description: "Number of hours volunteered."
      miles:
        type: "number"
        description: "Miles traveled for this volunteer event."
      location:
        type: "string"
        description: "Location where volunteer event happened."
      description:
        type: "string"
        description: "Other notes about volunteer hour entry."
      contactName:
        type: "string"
        description: "Contact of someone who can confirm this hour entry."
      contactDetails:
        type: "string"
        description: "Addional contact information for hour confirmation."
    
    required:
    - "needId"
    - "userId"
    - "hours"
    
    
  UpdateHoursBody:
    type: "object"
    properties:
      hourId:
        type: "string"
        description: "The unique ID for the entry you wish to edit."
      hours:
        type: "number"
        description: "Number of hours volunteered."
      status:
        type: "string"
        enum: [approved, pending, denied, inactive, entered]
        description: "Approval status of hour entry. e.g. 'approved', 'pending', 'denied', 'inactive', or 'entered'"
      miles:
        type: "number"
        description: "Miles traveled for this volunteer event."
      location:
        type: "string"
        description: "Location where volunteer event happened."
      description:
        type: "string"
        description: "Other notes about volunteer hour entry."
      contactName:
        type: "string"
        description: "Contact of someone who can confirm this hour entry."
      contactDetails:
        type: "string"
        description: "Addional contact information for hour confirmation."
        
    required:
    - "hourId"
    

  BaseListResponse:
    allOf:
    - $ref: "#/definitions/BaseResponse"
    - type: "object"
      properties:
        rows:
          type: "integer"
          description: "Total number of results"
          example: 251
        offset:
          type: "integer"
          description: "Index of the page for returned data, starting from zero"
          example: 2
        limit:
          type: "integer"
          description: "Maximum number of records to return on page"
          example: 10
          
  UserListResponse:
    allOf:
    - $ref: "#/definitions/BaseListResponse"
    - type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/definitions/User"
  UserByIdResponse:
    allOf:
    - $ref: "#/definitions/BaseResponse"
    - type: "object"
      properties:
        data:
          $ref: "#/definitions/User"
            
  AgencyListResponse:
    allOf:
    - $ref: "#/definitions/BaseListResponse"
    - type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/definitions/Agency"
  
  AgencyByIdResponse:
    allOf:
    - $ref: "#/definitions/BaseResponse"
    - type: "object"
      properties:
        data:
          $ref: "#/definitions/Agency"
          
  NeedListResponse:
    allOf:
    - $ref: "#/definitions/BaseListResponse"
    - type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/definitions/Need"
            
  NeedByIdResponse:
    allOf:
    - $ref: "#/definitions/BaseResponse"
    - type: "object"
      properties:
        data:
          $ref: "#/definitions/Need"
          
  ResponseByIdResponse:
    allOf:
    - $ref: "#/definitions/BaseResponse"
    - type: "object"
      properties:
        data:
          $ref: "#/definitions/Response"
          
  ResponseListResponse:
    allOf:
    - $ref: "#/definitions/BaseListResponse"
    - type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/definitions/Response"
            
  HourByIdResponse:
    allOf:
    - $ref: "#/definitions/BaseResponse"
    - type: "object"
      properties:
        data:
          $ref: "#/definitions/Hour"
            
  HourListResponse:
    allOf:
    - $ref: "#/definitions/BaseListResponse"
    - type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/definitions/Hour"
            
  EventListResponse:
    allOf:
    - $ref: "#/definitions/BaseListResponse"
    - type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/definitions/Event"
  
  EventByIdResponse:
    allOf:
    - $ref: "#/definitions/BaseResponse"
    - type: "object"
      properties:
        data:
          $ref: "#/definitions/Event"
  
  NoApiKeyResponse:
    type: "object"
    properties:
      status:
        type: "boolean"
        example: false
      error: 
        type: "string"
        example: "Invalid API Key."
        
  User:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Unique identifier for the user  record."
        pattern: "^[0-9]+$"
        example : "123456"
      status:
        type: "string"
        description: "Current status of the user."
        example : "active"
      referenceId:
        type: "string"
        description: "Remote unique identifier for the user record."
        example : null
        x-nullable: true
      firstName:
        type: "string"
        description: "First name for the user."
        example : "Paula"
        x-nullable: true
      lastName:
        type: "string"
        description: "Last name for the user."
        example : "Jones"
        x-nullable: true
      middleName:
        type: "string"
        description: "Middle name for the user."
        example : "Kelly"
        x-nullable: true
      email:
        type: "string"
        description: "Valid email address for the user."
        example : "pjones@example.com"
      mobile:
        type: "string"
        description: "Mobile phone number for the user."
        example : "615-555-1212"
      phone:
        type: "string"
        description: "Phone number for the user."
        example : "978-555-1212"
      company:
        type: "string"
        description: "Company as defined by the user."
        example : ""
      gender:
        type: "string"
        description: "Gender of the user."
        example : "Female"
      birthdate:
        type: "string"
        description: "Birthdate as defined by the user."
        example : ""
      address:
        type: "string"
        description: "Street address for the user."
        example : "1212 Walking Ln."
      address2:
        type: "string"
        description: "Secondary address for the user. e.g. Appt 2"
        example : "Appt 2b"
      city:
        type: "string"
        description: "City for the user"
        example : "Schenectady"
      state:
        type: "string"
        description: "Two letter state abbreviation. e.g. NY."
        example : "NY"
      postal:
        type: "string"
        description: "Zip/Postal code for the user"
        example : "12345"
      dateAdded:
        type: "string"
        description: "The time, in ISO 8601 format, at which the user was created."
        example : "2010-11-29T15:44:25-05:00"
      dateUpdated:
        type: "string"
        description: "The time, in ISO 8601 format, at which the user was updated."
        example : "2013-02-09T11:11:25-05:00"
      dateLastLogin:
        type: "string"
        description: "The time, in ISO 8601 format, at which the user last logged in."
      link:
        type: "string"
        description: "Link to be used that will auto-log user into the site. Note: must pass 'getLogin' parameter in request to receive."
        x-nullable: true
      expires:
        type: "string"
        description: "The time, in ISO 8601 format, that this link will expire."
        x-nullable: true
      now:
        type: "string"
        description: "The current server time in ISO 8601 format."
        x-nullable: true
      favoriteAgencies:
        type: "array"
        description: "Causes defined by the agency."
        items: 
          $ref: "#/definitions/Agency"
        
      
    required:
    - "id"
    
  Agency:
    type: "object"
   
    properties:
      id:
        type: "string"
        description: "Unique identifier for the agency  record."
        pattern: "^[0-9]+$" 
        example : "9658"
      agencyLink:
        type: "string"
        description: "Shortcut URL to go directly to the agency page. Final URL would be https://(siteurl)/agency/(agencyLink)/"
        example : "agencyone"
        x-nullable: true
      agencyName:
        type: "string"
        description: "Name of Agency"
        example : "Agency One"
      agencyAddress:
        type: "string"
        description: "Address for Agency"
        example : "1212 S. Pine Street"
        x-nullable: true
      agencyAddress2:
        type: "string"
        description: "Continued address for agency"
        example : ""
        x-nullable: true
      agencyCity:
        type: "string"
        description: "Agency City"
        example : "Danvers"
        x-nullable: true
      agencyState:
        type: "string"
        description: "Agency State"
        example : "MA"
        x-nullable: true
      agencyZip:
        type: "string"
        description: "Agency zip code."
        example : ".01923"
        x-nullable: true
      agencyPhone:
        type: "string"
        description: "Agency phone number."
        example : "781-555-1212"
        x-nullable: true
      agencyContact:
        type: "string"
        description: "Name of agency contact."
        example : "Joyce Smith"
        x-nullable: true
      agencyURL:
        type: "string"
        description: "Agency website URL."
        example : "http://www.example.org/"
        x-nullable: true
      agencyDescription:
        type: "string"
        description: "Agency description."
        example : ""
        x-nullable: true
      status:
        type: "string"
        description: "Current status agency."
        example : "active"
        x-nullable: true
      dateAdded:
        type: "string"
        description: "The time, in ISO 8601 format, at which the agency was created."
        example : "2010-11-29T15:44:25-05:00"
      dateUpdated:
        type: "string"
        description: "The time, in ISO 8601 format, at which the agency was updated."
        example : "2013-02-09T11:11:25-05:00"
      causes:
        type: "array"
        description: "Causes defined by the agency."
        items: 
          type: "string"
      
    required:
    - "id"
    - "agencyName"
    
  Need:
    type: "object"
    
    properties:
      id:
        type: "string"
        description: "Unique identifier for the need record."
        pattern: "^[0-9]+$" 
        example : "3"
      needAddress:
        description: "Street address for need."
        type: "string"
        x-nullable: true
      needCity:
        description: "City for need."
        type: "string"
        x-nullable: true
      needState:
        description: "State for need."
        type: "string"
        x-nullable: true
      needZip:
        description: "Zip Code for need"
        type: "string"
        x-nullable: true
        example: "01923"
      needTitle:
        description: "Title of need."
        type: "string"
        example: "What is a need?"
      needDetails:
        description: "Description of need."
        type: "string"
        example: "This is an example need."
      needType:
        description: "Primary category assigned to need."
        type: "string"
        example: "volunteer"
      needAgeRequirements:
        description: "Minimum age requirement for need responder."
        type: "string"
        x-nullable: true
        example: "18"
      needAllowTeams:
        description: "Indicates if a need is accepting team signups."
        type: "boolean"
        example: false
      needContact:
        description: "Comma separated list of contact email addresses for need."
        type: "string"
        x-nullable: true
        example: "jack@example.com,mary@example.com"
      needDate:
        description: "Date need either happens on or expires. If needDateType is 'ongoing' this will be null."
        type: "string"
        pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}$|^$"
        x-nullable: true
        example: "2013-06-15"
      needDateType:
        description: "Either 'ongoing', 'until', or 'on'"
        type: "string"
        enum: [ongoing, until, on]
        example: "on"
      needVolunteersNeeded:
        description: "Number of responders needed for this need."
        type: "string"
        pattern: "^[0-9]+$"
        x-nullable: true
        example: null
      duration:
        description: "Duration of need in hours."
        type: "string"
      registrationClosed:
        description: "The date when responses will no longer be accepted."
        type: "string"
      isPrivate:
        description: "Indicates if the need is private and should not be shown publicly."
        type: "boolean"
      status:
        description: "Current status of need."
        type: "string"
        example: "active"
      impactArea:
        description: "Impact area as defined by the agency."
        type: "string"
      dateAdded:
        description: "The time, in ISO 8601 format, at which the record was created."
        type: "string"
        example: "2010-11-29T15:44:25-05:00"
      dateUpdated :
        description: "The time, in ISO 8601 format, at which the record was updated."
        type: "string"
        example: "2013-02-09T11:11:25-05:00"
      agencyId :
        description: "Unique ID for agency that created need."
        type: "string"
        pattern: "^[0-9]+$"
        example: "521456"
      agencyName :
        description: "Name of agency that created need."
        type: "string"
        example: "All Persons Agency"
      aemId :
        description: "Unique ID of the Advanced Event attached to this item."
        type: "string"
        pattern: "^[0-9]+$"
      aemTitle :
        description: "Title of the Advanced Event attached to this item."
        type: "string"
        pattern: "^[0-9]+$"
      initiativeId :
        description: "Unique ID of the Initiative attached to this item."
        type: "string"
        pattern: "^[0-9]+$"
      initiativeTitle :
        description: "Title of the Initiative attached to this item."
        type: "string"
        pattern: "^[0-9]+$"
      needHoursDescription :
        description: "Text description of the need time. e.g. 9am to 5pm"
        type: "string"
        example: "9am to 5pm"
      interests:
        description: "Interests assigned to the need."
        type: "array"
        items:
          type: "string"
      needLink:
        description: "Direct link to the need."
        type: "string"
      needLinkCustom:
        description: "Direct link to the need using your custom domain name."
        type: "string"
      shifts:
        description: "Array of shifts attached to this need. Each shift item consists of shiftId, startDate, endDate, duration, capacity, responses, and status"
        type: "array"
        items:
          $ref: "#/definitions/Shift"
      qualifications:
        description: "Array of qualifications attached to this need. Each shift item consists of qualificationId, qualificationCategory, AND qualificationTitle"
        type: "array"
        items:
          $ref: "#/definitions/Qualification"
    
    required:
      - "id"
      - "needTitle"
      - "needDetails"
      - "needType"
      - "needAgeRequirements"
      - "needVolunteersNeeded"
      - "needZip"
      - "needDate"
      - "needDateType"
      - "dateAdded"
      - "dateUpdated"
      - "status"
      - "agencyId"
      - "agencyName"
          
  Qualification:
    type: "object"
    
    properties:
      qualificationId:
        type: "string"
      qualificationCategory:
        type: "string"
      qualificationTitle:
        type: "string"
          
  Shift:
    type: "object"
    
    properties:
      shiftId:
        type: "string"
      startDate:
        type: "string"
      endDate:
        type: "string"
      duration:
        type: "string"
      capacity:
        type: "string"
      responses:
        type: "string"
      status:
        type: "string"

  Event:
    type: "object"
   
    properties:
      eventId:
        type: "string"
        description: "Unique identifier for the record."
        pattern: "^[0-9]+$" 
        example : "16228"
      eventStatus:
        type: "string"
        description: "Current status of the record."
        example : "active"
      eventTitle:
        type: "string"
        description: "Title of the record."
        example : "Pet Therapy training class Fall 2016"
      eventDescription:
        type: "string"
        description: "Description of the record."
        example : "We have 2 Orientation/Training classes one March 2, 2016 one September 7, 2016."
      eventWebsite:
        type: "string"
        description: "Website listed for the event."
        example : ""
      eventHost:
        type: "string"
        description: "Host listed for the event."
        example : ""
      eventContact:
        type: "string"
        description: "Address listed for the event."
        example : "www.therapypetpals.org"
      eventVenue:
        type: "string"
        description: "Venue listed for the event."
        example : ""
      eventAddress:
        type: "string"
        description: "Address listed for the event."
        example : "27434 Robinson Rd."
      eventAddress2:
        type: "string"
        description: "Address listed for the event."
        example : ""
      eventCity:
        type: "string"
        description: "City listed for the event."
        example : "Spring"
      eventState:
        type: "string"
        description: "State listed for the event."
        example : "TX"
      eventZipCode:
        type: "string"
        description: "Zip code listed for the event."
        example : "77386"
      eventCounty:
        type: "string"
        description: "County listed for the event."
        example : ""
      eventEmail:
        type: "string"
        description: "Email listed for the event."
        example : "mlucas99@sbcglobal.net"
      eventStart:
        type: "string"
        description: "The date/time, in ISO 8601 format, that the event starts."
        example : "2016-09-07T18:45:00-05:00"
      eventEnd:
        type: "string"
        description: "The date/time, in ISO 8601 format, that the event ends."
        example : "2016-09-07T20:30:00-05:00"
      dateAdded:
        type: "string"
        description: "The date/time, in ISO 8601 format, that the event was added."
        example : "2015-02-13T12:52:37-06:00"
      dateUpdated:
        type: "string"
        description: "The date/time, in ISO 8601 format, that the event was last updated."
        example : "2016-01-12T16:10:43-06:00"
      agencyId:
        type: "string"
        description: "The ID for the agency that created the event."
        pattern: "^[0-9]+$" 
        example : "17490"
      agencyName:
        type: "string"
        description: "The name of the agency that created the event."
        example : "Therapy Pet Pals of Texas, Inc."
      agencyStatus:
        type: "string"
        description: "The current status of the agency that created the event."
        example : "active"
      
    required:
    - "eventId"
    
  Response:
    type: "object"
   
    properties:
      responseId:
        type: "number"
        description: "Unique identifier for the user record."
        pattern: "^[0-9]+$" 
        example : "255002"
      responseStatus:
        type: "string"
        description: "Current status of the record."
        example : "active"
      responsePhone:
        type: "string"
        description: "Current status of the record."
        x-nullable: true
        example : null      
      responseAddress:
        type: "string"
        x-nullable: true
        description: "Current status of the record."
        example : ""
      responseNote:
        type: "string"
        description: "Current status of the record."
        example : ""
      waiverAgree:
        type: "string"
        description: "Did user agree to waiver"
        example : "No"
      agencyId:
        type: "string"
        description: "Unique identifier"
        pattern: "^[0-9]+$" 
        example : "33316"
      agencyName:
        type: "string"
        description: "Agency name"
        example : "Meow-ntain Cat Sanctuary Agency"
      needId:
        type: "string"
        description: "Unique identifier"
        pattern: "^[0-9]+$" 
        example : "93929"
      needTitle:
        type: "string"
        description: "Need title"
        example : "Purrfessional Administrative Assistant"
      needDate:
        type: "string"
        description: "Need date"
        example : "2016-02-06"
      userId:
        type: "string"
        description: "Unique identifier"
        pattern: "^[0-9]+$" 
        example : "613930"
      firstName:
        type: "string"
        description: "Responder first name"
        example : "Bernadette"
      lastName:
        type: "string"
        description: "Responder last name"
        example : "Grasty-Colont"
      email:
        type: "string"
        description: "Unique ID of the Advanced Event attached to this item."
        example : "bernadette@example.com"
      aemId:
        type: "string"
        description: "Title of the Advanced Event attached to this item."
        pattern: "^[0-9]+$" 
        example : ""
      aemTitle:
        type: "string"
        description: "Title of the Advanced Event attached to this item."
        pattern: "^[0-9]+$" 
        example : ""
      initiativeId:
        type: "string"
        description: "Unique ID of the Initiative attached to this item."
        pattern: "^[0-9]+$" 
        example : ""
      initiativeTitle:
        type: "string"
        description: "Title of the Initiative attached to this item."
        pattern: "^[0-9]+$" 
        example : ""
      companyId:
        type: "string"
        description: "ID of the Company attached to this item."
        pattern: "^[0-9]+$" 
        example : ""
      companyName:
        type: "string"
        description: "Name of the Company attached to this item."
        pattern: "^[0-9]+$" 
        example : ""
      shift:
        type: "array"
        description: "The shift attached to this response. Shift item consists of shiftId, startDate, endDate, duration, capacity, responses, and status"
        items: 
          $ref: "#/definitions/Shift"
      responseAdded:
        type: "string"
        description: "The time, in ISO 8601 format, that this link will expire."
        example: "2015-03-04T09:31:20-06:00"
      responseUpdated:
        type: "string"
        description: "The time, in ISO 8601 format, that this link will expire."
        example: "2015-03-04T09:31:20-06:00"
      
    required:
    - "responseId"
    - "responseStatus"
    
  Hour:
    type: "object"
    
    properties:
      hourId:
        type: "string"
        description: "Unique identifier for the record."
        pattern: "^[0-9]+$" 
        example : "127017"
      status:
        type: "string"
        description: "Current status of the record."
        example : "approved"
      contactName:
        type: "string"
        description: "Contact name from the need."
        example : ""
      contactDetails:
        type: "string"
        description: "Contact details from the need."
        example : ""
      hours:
        type: "string"
        description: "Number of hours submitted for this entry."
        example : "3.00"
      volunteerDate:
        type: "string"
        description: "The date and time the volunteer began."
      hourType:
        type: "string"
        description: "Type of hour entry. Either need or individual."
      miles:
        type: "string"
        description: "Number of miles submitted for this entry."
        example: "5"
      location:
        type: "string"
        description: "Location information added by the user."
        example: ""
      description:
        type: "string"
        description: "Description information added by the user for this entry."
        example: "Explored trail to get idea of how much work and what tools will be required."
      agencyId:
        type: "string"
        description: "Id of the agency that created the need."
        example: "33317"
      agencyName:
        type: "string"
        description: "Name of the agency that created the need."
        example: "Mountain Trail Club"
      aemId:
        type: "string"
        description: "Unique ID of the Advanced Event attached to this item."
        pattern: "^[0-9]+$"
      aemTitle:
        type: "string"
        description: "Title of the Advanced Event attached to this item."
        pattern: "^[0-9]+$"
      needId:
        type: "string"
        description: "ID of the need to which the user responded."
        example: "93929"
      needTitle:
        type: "string"
        description: "Name of the need to which the user responded."
        example: "Trail Maintenance on the Singing Creek Trail"
      needDate:
        type: "string"
        description: "Date of the need to which the user responded."
        format: "yyyy-mm-dd"
        example: "2015-03-28"
      userId:
        type: "string"
        description: "ID of the user who responded."
        format: "yyyy-mm-dd"
        example: "613928"
      firstName:
        type: "string"
        description: "First name of the user who responded."
        example: "Ada"
      lastName:
        type: "string"
        description: "Last name of the user who responded."
        example: "User"
      email:
        type: "string"
        description: "Email name of the user who responded."
        example: "user@example.com"
      dateAdded:
        type: "string"
        description: "The date, in ISO 8601 format, that hour entry was added."
        example: "2015-03-05T08:38:37-06:00"
      dateUpdated:
        type: "string"
        description: "The date, in ISO 8601 format, that hour entry was last updated."
        example: "2015-03-05T08:40:02-06:00"
        
    required:
    - "hourId"
    - "hours"
    - "needId"
    - "userId"
    
    
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Galaxy Digital"
  url: "https://www.galaxydigital.com/"